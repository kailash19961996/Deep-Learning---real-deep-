{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Numpy for efficient Matrix and mathematical operations.\n",
    "import numpy as np\n",
    "\n",
    "# Matplotlib for visualizing graphs\n",
    "import matplotlib\n",
    "\n",
    "# import matplotlib for plotting and visualization\n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](imgs/AND_table_with_plot.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is our AND function data \n",
    "X = np.array([\n",
    "    [0, 0],\n",
    "    [0, 1],\n",
    "    [1, 0],\n",
    "    [1, 1]])\n",
    "\n",
    "Y = np.array([\n",
    "    [0],\n",
    "    [0],\n",
    "    [0],\n",
    "    [1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tranpose matrix\n",
    "X_train = X.T\n",
    "Y_train = Y.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train dataset \n",
      " [[0 0 1 1]\n",
      " [0 1 0 1]]\n",
      "Y_train dataset \n",
      " [[0 0 0 1]]\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train dataset \\n\", X_train)\n",
    "print(\"Y_train dataset \\n\", Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape (2, 4)\n",
      "Y_train shape (1, 4)\n"
     ]
    }
   ],
   "source": [
    "#This is the expected input matrix shape/dimension\n",
    "print(\"X_train shape\", X_train.shape)\n",
    "print(\"Y_train shape\", Y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 4)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Network Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_parameters_zeros(dim):\n",
    "    n_features = dim\n",
    "    n_out = 1\n",
    "    params = { \"W\": np.zeros((n_out, n_features)),\n",
    "           \"b\": np.zeros((n_out, 1)) }\n",
    "    return params\n",
    "\n",
    "def sigmoid(Z, derivative=False):\n",
    "    if derivative:\n",
    "        sig = 1 / (1 + np.exp(-Z))\n",
    "        return sig*(1-sig)\n",
    "    return 1 / (1 + np.exp(-Z))                            \n",
    "\n",
    "def feed_forward(X, params):\n",
    "    cache = {}\n",
    "    cache[\"Z\"] = np.dot(params[\"W\"], X) + params[\"b\"]\n",
    "    cache[\"A\"] = sigmoid(cache[\"Z\"], False)\n",
    "    return cache\n",
    "\n",
    "def back_propagate(X, Y, cache):\n",
    "    m = X.shape[1]\n",
    "    P=cache[\"A\"]\n",
    "    #dP = (1/m) * (P-Y)/(P*(1-P))\n",
    "    #dZ = dP * sigmoid(cache[\"Z\"], derivative=True)\n",
    "    ## Simplified\n",
    "    dZ = (1/m) * (P-Y)    \n",
    "    dW = np.dot(dZ, X.T)\n",
    "    db = np.sum(dZ, axis=1, keepdims=True)\n",
    "    return {\"dW\": dW, \"db\": db}\n",
    "\n",
    "def update_parameters(params, grads, learning_rate):\n",
    "    W = params[\"W\"] - learning_rate * grads[\"dW\"]\n",
    "    b = params[\"b\"] - learning_rate * grads[\"db\"]\n",
    "    return {\"W\": W, \"b\": b}\n",
    "\n",
    "def BinaryCrossEntropy(Y, P):\n",
    "    m = Y.shape[1]\n",
    "    cost =  (1 / m) * np.sum(np.multiply(-Y, np.log(P)) \n",
    "                             - np.multiply(1 - Y, np.log(1 - P)))\n",
    "    return cost\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Network Model Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](imgs/2in_1_layer_NN.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters initialization\n",
    "params = initialize_parameters_zeros(X_train.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W shape (1, 2)\n",
      "b shape (1, 1)\n"
     ]
    }
   ],
   "source": [
    "# parameters' shape\n",
    "print(\"W shape\", params['W'].shape)\n",
    "print(\"b shape\", params['b'].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'W': array([[0., 0.]]), 'b': array([[0.]])}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# parameters' initialised randomly\n",
    "params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Network Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost at epoch#0: 0.71955\n",
      "Cost at epoch#1: 0.61831\n",
      "Cost at epoch#2: 0.56856\n",
      "Cost at epoch#3: 0.53903\n",
      "Cost at epoch#4: 0.51762\n",
      "Cost at epoch#5: 0.49991\n",
      "Cost at epoch#6: 0.48420\n",
      "Cost at epoch#7: 0.46982\n",
      "Cost at epoch#8: 0.45646\n",
      "Cost at epoch#9: 0.44395\n",
      "Cost at epoch#10: 0.43220\n",
      "Cost at epoch#11: 0.42112\n",
      "Cost at epoch#12: 0.41068\n",
      "Cost at epoch#13: 0.40080\n",
      "Cost at epoch#14: 0.39144\n",
      "Cost at epoch#15: 0.38257\n",
      "Cost at epoch#16: 0.37414\n",
      "Cost at epoch#17: 0.36612\n",
      "Cost at epoch#18: 0.35849\n",
      "Cost at epoch#19: 0.35121\n",
      "Cost at epoch#20: 0.34425\n",
      "Cost at epoch#21: 0.33761\n",
      "Cost at epoch#22: 0.33124\n",
      "Cost at epoch#23: 0.32515\n",
      "Cost at epoch#24: 0.31930\n",
      "Cost at epoch#25: 0.31368\n",
      "Cost at epoch#26: 0.30828\n",
      "Cost at epoch#27: 0.30309\n",
      "Cost at epoch#28: 0.29809\n",
      "Cost at epoch#29: 0.29327\n",
      "Cost at epoch#30: 0.28862\n",
      "Cost at epoch#31: 0.28413\n",
      "Cost at epoch#32: 0.27979\n",
      "Cost at epoch#33: 0.27560\n",
      "Cost at epoch#34: 0.27154\n",
      "Cost at epoch#35: 0.26761\n",
      "Cost at epoch#36: 0.26381\n",
      "Cost at epoch#37: 0.26011\n",
      "Cost at epoch#38: 0.25653\n",
      "Cost at epoch#39: 0.25306\n",
      "Cost at epoch#40: 0.24968\n",
      "Cost at epoch#41: 0.24641\n",
      "Cost at epoch#42: 0.24322\n",
      "Cost at epoch#43: 0.24012\n",
      "Cost at epoch#44: 0.23710\n",
      "Cost at epoch#45: 0.23416\n",
      "Cost at epoch#46: 0.23130\n",
      "Cost at epoch#47: 0.22851\n",
      "Cost at epoch#48: 0.22579\n",
      "Cost at epoch#49: 0.22314\n",
      "Cost at epoch#50: 0.22055\n",
      "Cost at epoch#51: 0.21803\n",
      "Cost at epoch#52: 0.21556\n",
      "Cost at epoch#53: 0.21316\n",
      "Cost at epoch#54: 0.21080\n",
      "Cost at epoch#55: 0.20851\n",
      "Cost at epoch#56: 0.20626\n",
      "Cost at epoch#57: 0.20406\n",
      "Cost at epoch#58: 0.20191\n",
      "Cost at epoch#59: 0.19981\n",
      "Cost at epoch#60: 0.19775\n",
      "Cost at epoch#61: 0.19573\n",
      "Cost at epoch#62: 0.19376\n",
      "Cost at epoch#63: 0.19182\n",
      "Cost at epoch#64: 0.18993\n",
      "Cost at epoch#65: 0.18807\n",
      "Cost at epoch#66: 0.18625\n",
      "Cost at epoch#67: 0.18446\n",
      "Cost at epoch#68: 0.18271\n",
      "Cost at epoch#69: 0.18099\n"
     ]
    }
   ],
   "source": [
    "# Hyper-parameters\n",
    "learning_rate = 1\n",
    "number_of_epoch=70\n",
    "m_batch = X_train.shape[1]\n",
    "\n",
    "# For testing purposes, we fixed the W and b\n",
    "params['W'] = np.array([[.1, .6]])\n",
    "params['b'] = np.array([[0]])\n",
    "\n",
    "# Initially empty list, this will store all the training cost values\n",
    "costs = []\n",
    "\n",
    "# Start training\n",
    "for epoch in range(number_of_epoch):\n",
    "    \n",
    "    cache = feed_forward(X_train, params)\n",
    "    grads = back_propagate(X_train, Y_train, cache)\n",
    "    params = update_parameters(params, grads, learning_rate)\n",
    "\n",
    "    cost = BinaryCrossEntropy(Y_train, cache[\"A\"])\n",
    "    \n",
    "    if (epoch % 1) == 0 or epoch == number_of_epoch - 1:\n",
    "        print(\"Cost at epoch#{}: {:.5f}\".format(epoch, cost))\n",
    "        costs.append(cost)  \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performance Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot Learning Curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_learning_curve(costs, learning_rate, total_epochs, save=False):\n",
    "    \n",
    "    # plot the cost\n",
    "    plt.figure()\n",
    "    #plt.style.use(\"fivethirtyeight\")\n",
    "    plt.style.use('seaborn-whitegrid')\n",
    "    \n",
    "    # the steps at with costs were recorded\n",
    "    steps = int(total_epochs / len(costs))  \n",
    "    plt.ylabel('Cost')\n",
    "    plt.xlabel('Iterations ')\n",
    "    plt.title(\"Learning rate =\" + str(learning_rate))\n",
    "    plt.plot(np.squeeze(costs))\n",
    "    locs, labels = plt.xticks()\n",
    "    # change x labels of the plot\n",
    "    plt.xticks(locs[1:-1], tuple(np.array(locs[1:-1], dtype='int')*steps))  \n",
    "    plt.xticks()\n",
    "    if save:\n",
    "        plt.savefig('Cost_Curve.png', bbox_inches='tight')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n"
     ]
    }
   ],
   "source": [
    "print(plt.style.available)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_learning_curve(costs, learning_rate, number_of_epoch, save=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate Model's Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(data_in, label_in, params, threshold):\n",
    "    m = data_in.shape[1]\n",
    "    predict = np.zeros((1,m))\n",
    "    cache = feed_forward(data_in, params)\n",
    "    probs=cache[\"A\"]\n",
    "    prediction = (probs >= threshold) * 1.0\n",
    "    accuracy = np.mean(prediction == label_in) * 100\n",
    "    return probs, prediction, accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The predicted outputs of 4 examples: \n",
      "[[0. 0. 0. 1.]]\n",
      "The predicted prbabilities of 4 examples:\n",
      " [[0.017 0.182 0.179 0.739]]\n",
      "\n",
      "The accuracy of the model is: 100.0%\n"
     ]
    }
   ],
   "source": [
    "classifcation_thresh = 0.5\n",
    "\n",
    "probs, predicted_outputs, accuracy = predict(X_train, Y_train, params, classifcation_thresh)\n",
    "\n",
    "print(\"The predicted outputs of 4 examples: \\n{}\".format(predicted_outputs[:,:4]))\n",
    "print(\"The predicted prbabilities of 4 examples:\\n {}\".format(np.round(probs[:, :4], decimals=3)))\n",
    "print(\"\\nThe accuracy of the model is: {}%\".format(accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot Decision Boundary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_decision_boundary(model, X, Y, axis_lines=False,save=False):\n",
    "    # first plot the data to see what is the size of the plot\n",
    "    plt.scatter(X[:, 0], X[:, 1], s=200, c=np.squeeze(Y))  # s-> size of marker\n",
    "\n",
    "    # get the x and y range of the plot\n",
    "    x_ticks = plt.xticks()[0]\n",
    "    y_ticks = plt.yticks()[0]\n",
    "\n",
    "    plt.clf()  # clear figure after getting size\n",
    "\n",
    "    # Generate a grid of points between min_x_point-0.5 and max_x_point+0.5 \n",
    "    # with 1000 points in between, similarly, for y points\n",
    "    xs = np.linspace(min(x_ticks) - 0.5, max(x_ticks) + 0.5, 1000)\n",
    "    ys = np.linspace(max(y_ticks) + 0.5, min(y_ticks) - 0.5, 1000)\n",
    "\n",
    "    xx, yy = np.meshgrid(xs, ys)  # create data points\n",
    "\n",
    "    # Predict the function value for the whole grid\n",
    "    # np.c: Translates slice objects to concatenation along the second axis.\n",
    "    prediction_data = np.c_[xx.ravel(), yy.ravel()]\n",
    "    \n",
    "    print(\"XX: {}, XX.ravel: {}\".format (xx.shape, xx.ravel().shape))\n",
    "    print(\"yy: {}, yy.ravel: {}\".format (yy.shape, yy.ravel().shape))\n",
    "    print(\"np.c concated shape{} as Predidction_data\".format (prediction_data.shape))\n",
    "        \n",
    "    print(\"Prediction Data: Before Transpose\", prediction_data.shape)\n",
    "    prediction_data = prediction_data.T\n",
    "    print(\"Prediction Data: After Transpose\", prediction_data.shape)\n",
    "    \n",
    "    Z = model(prediction_data)\n",
    "    print(\"Prediction Output (Z): Before Reshape\", Z.shape)\n",
    "    Z = Z.reshape(xx.shape)\n",
    "    print(\"Prediction Output (Z): After Reshape\", Z.shape)\n",
    "\n",
    "    # Plot the contour and training examples\n",
    "    plt.style.use('seaborn-whitegrid')\n",
    "    # draw a blue colored decision boundary\n",
    "    plt.contour(xx, yy, Z, cmap='Blues')  \n",
    "    plt.title('Decision Boundary', size=18)\n",
    "    plt.xlabel('$x_1$', size=20)\n",
    "    plt.ylabel('$x_2$', size=20)\n",
    "    if axis_lines:\n",
    "        plt.axhline(0, color='black')\n",
    "        plt.axvline(0, color='black')\n",
    "\n",
    "    # color map 'cmap' maps 0 labeled data points to red and 1 labeled points to green\n",
    "    cmap = matplotlib.colors.ListedColormap([\"red\", \"green\"], name='from_list', N=None)\n",
    "    # s-> size of marker\n",
    "    plt.scatter(X[:, 0], X[:, 1], s=200, c=np.squeeze(Y), marker='x', cmap=cmap)  \n",
    "\n",
    "    if save:\n",
    "        plt.savefig('decision_boundary.png', bbox_inches='tight')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XX: (1000, 1000), XX.ravel: (1000000,)\n",
      "yy: (1000, 1000), yy.ravel: (1000000,)\n",
      "np.c concated shape(1000000, 2) as Predidction_data\n",
      "Prediction Data: Before Transpose (1000000, 2)\n",
      "Prediction Data: After Transpose (2, 1000000)\n",
      "Prediction Output (Z): Before Reshape (1, 1000000)\n",
      "Prediction Output (Z): After Reshape (1000, 1000)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def predict_dec(params, data_in, threshold):\n",
    "    cache = feed_forward(data_in, params)\n",
    "    probas = cache[\"A\"]\n",
    "    # if probability of example >= thresh => output 1, vice versa\n",
    "    predictions = (probas >= threshold) * 1.0\n",
    "    return predictions\n",
    "\n",
    "plot_decision_boundary(lambda x: predict_dec(params, x, classifcation_thresh),\n",
    "                       X_train.T, Y_train, axis_lines=True, save=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot Decision Boundary with Shaded Areas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_decision_boundary_shaded(model, X, Y, axis_lines=False,save=False):\n",
    "    # first plot the data to see what is the size of the plot\n",
    "    plt.scatter(X[:, 0], X[:, 1], s=200, c=np.squeeze(Y))  # s-> size of marker\n",
    "\n",
    "    # get the x and y range of the plot\n",
    "    x_ticks = plt.xticks()[0]\n",
    "    y_ticks = plt.yticks()[0]\n",
    "\n",
    "    plt.clf()  # clear figure after getting size\n",
    "\n",
    "    # Generate a grid of points between min_x_point-0.5 and max_x_point+0.5 \n",
    "    # with 1000 points in between, similarly, for y points\n",
    "    xs = np.linspace(min(x_ticks)-0.5, max(x_ticks)+0.5, 1000)\n",
    "    ys = np.linspace(max(y_ticks)+0.5, min(y_ticks)-0.5, 1000)\n",
    "    xx, yy = np.meshgrid(xs, ys)\n",
    "\n",
    "    # Predict the function value for the whole grid\n",
    "    prediction_data = np.c_[xx.ravel(), yy.ravel()]\n",
    "\n",
    "    Z = model(prediction_data)\n",
    "    Z = Z.reshape(xx.shape)\n",
    "\n",
    "    # Plot the contour and training examples\n",
    "    cmap = matplotlib.colors.ListedColormap([\"red\",\"green\"], name='from_list', N=None)\n",
    "    plt.style.use('seaborn-whitegrid')\n",
    "\n",
    "    # 'contourf'-> filled contours (red('#EABDBD'): 0 / green('#C8EDD6'): 1)\n",
    "    plt.contourf(xx, yy, Z, cmap=matplotlib.colors.ListedColormap(['#EABDBD', '#C8EDD6'], \n",
    "                                                                  name='from_list', N=None))\n",
    "    plt.title('Shaded Decision Boundary', size=18)\n",
    "    plt.xlabel('$x_1$', size=20)\n",
    "    plt.ylabel('$x_2$', size=20)\n",
    "    if axis_lines:\n",
    "        plt.axhline(0, color='black')\n",
    "        plt.axvline(0, color='black')\n",
    "    # s-> size of marker\n",
    "    plt.scatter(X[:, 0], X[:, 1], s=200, c=np.squeeze(Y), marker='x', cmap=cmap)  \n",
    "\n",
    "    if save:\n",
    "        plt.savefig('decision_boundary_shaded.png', bbox_inches='tight')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_decision_boundary_shaded(lambda x: predict_dec(params, x.T, classifcation_thresh),\n",
    "                       X_train.T, Y_train, axis_lines=True, save=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "oldHeight": 540.667,
   "position": {
    "height": "562.667px",
    "left": "982px",
    "right": "20px",
    "top": "119px",
    "width": "291px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "varInspector_section_display": "block",
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
